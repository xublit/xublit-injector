{"version":3,"sources":["../src/xublit-injector.es6"],"names":[],"mappings":"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","file":"xublit-injector.js","sourcesContent":["import 'babel-polyfill';\n\nimport EventEmitter from 'events';\n\nimport * as path from 'path';\nimport * as util from 'util';\n\nimport ModuleWrapper from './module-wrapper';\nimport ModuleBootstrapScope from './module-bootstrap-scope';\n\nimport * as __ from './constants';\nimport { loadModulesIn } from './module-loader';\nimport { missingDependencyHandler } from './missing-dependency-handler';\n\nexport default class Injector extends EventEmitter {\n\n    constructor (opts) {\n\n        super();\n\n        opts = opts || {};\n\n        if (!opts.baseDir) {\n            throw new Error('Missing \"baseDir\" option');\n        }\n\n        var defaults = {\n            baseDir: '',\n            coreModuleName: __.DEFAULT_CORE_MODULE_NAME,\n            includeDirs: [\n                path.join(opts.baseDir, 'node_modules', 'xublit*'), \n                path.join(opts.baseDir, 'src'),\n            ],\n            missingDependencyHandler: missingDependencyHandler,\n            moduleLoader: loadModulesIn,\n            bootstrapScopeVars: {},\n        };\n\n        var bootstrapScopeVars = {\n            injector: this,\n        };\n\n        Object.keys(defaults).forEach((key) => {\n\n            var value = key in opts ? opts[key] : defaults[key];\n\n            switch (key) {\n\n                case 'includeDirs':\n                    Injector.assertValidIncludeDirs(value);\n                    value = value.slice(0);\n                    break;\n\n                case 'moduleLoader':\n                    // no break\n\n                case 'missingDependencyHandler':\n                    if ('function' !== typeof value) {\n                        throw new TypeError(util.format(\n                            __.ERROR_MESSAGE_INVALID_FUNCTION_FOR, key\n                        ));\n                    }\n                    break;\n\n                case 'bootstrapScopeVars':\n                    value = Object.assign(\n                        {}, \n                        defaults[key], \n                        opts[key] || {},\n                        bootstrapScopeVars\n                    );\n                    break;\n\n            }\n\n            Object.defineProperty(this, key, {\n                value: value,\n                enumerable: true,\n            });\n\n        });\n\n        Object.defineProperties(this, {\n\n            injectables: {\n                value: new Map(),\n                enumerable: true,\n            },\n\n            moduleWrapperRefs: {\n                value: new Map(),\n                enumerable: true,\n            },\n\n            moduleWrapperRefOverrides: {\n                value: new Map(),\n                enumerable: true,\n            },\n\n            loadedModules: {\n                value: [],\n                enumerable: true,\n            },\n\n            wrappedModules: {\n                value: [],\n            },\n\n        });\n\n    }\n\n    static assertValidIncludeDirs (includeDirs) {\n\n        if (!Array.isArray(includeDirs)) {\n            throw new TypeError(__.ERROR_MESSAGE_INCL_DIRS_NOT_ARRAY);\n        }\n\n        includeDirs.forEach((includeDir) => {\n            if (!path.isAbsolute(includeDir)) {\n                throw new Error(util.format(\n                    __.ERROR_MESSAGE_RELATIVE_INCL_DIR, includeDir\n                ));\n            }\n        });\n\n    }\n\n    static wrapModule (module, ref, bootstrapScope) {\n        var moduleWrapper = new ModuleWrapper(module, ref);\n        moduleWrapper.setBootstrapScope(bootstrapScope);\n        return moduleWrapper;\n    }\n\n    defineModuleWrapperRef (ref, moduleWrapper) {\n        this.moduleWrapperRefs.set(ref, moduleWrapper);\n    }\n\n    defineInjectable (ref, injectable) {\n        this.injectables.set(ref, injectable);\n    }\n\n    loadModules () {\n\n        var loadedModules = this.moduleLoader(this.includeDirs) || [];\n\n        Array.prototype.push.apply(\n            this.loadedModules, \n            loadedModules\n        );\n\n        return this;\n\n    }\n\n    override (ref, moduleWrapper) {\n\n        if ('string' !== typeof ref) {\n            throw new TypeError(util.format(\n                'Expecting string as 1st argument, got %s', typeof ref\n            ));\n        }\n\n        if (!(moduleWrapper instanceof ModuleWrapper)) {\n\n            let varType = moduleWrapper.constructor &&\n                moduleWrapper.constructor.name ||\n                typeof moduleWrapper;\n\n            throw new TypeError(util.format(\n                'Expecting a ModuleWrapper as 2nd argument, got %s', varType\n            ));\n\n        }\n\n        this.moduleWrapperRefOverrides.set(ref, moduleWrapper);\n\n        if (!moduleWrapper.isBootstrapped) {\n            moduleWrapper.bootstrap\n        }\n\n        return this;\n\n    }\n\n    wrapLoadedModules () {\n\n        this.loadedModules.forEach((module) => {\n            this.wrapLoadedModule(module);\n        });\n\n        return this;\n\n    }\n\n    provide (ref, dependencyRefs, bootstrapFn, bootstrapScopeVars) {\n\n        var bootstrapFnScope = new ModuleBootstrapScope(bootstrapScopeVars);\n\n        var module = {\n            inject: dependencyRefs,\n            bootstrap: bootstrapFn,\n        };\n\n        var d = new ModuleWrapper(module, ref);\n\n        d.setBootstrapScope(bootstrapFnScope);\n\n        this.wrappedModules.push(d);\n\n        if (true === d.isInjectableAsInstance) {\n            this.defineModuleWrapperRef(d.instanceRef, d);\n        }\n\n        if (true === d.isInjectableAsClass) {\n            this.defineModuleWrapperRef(d.classRef, d);\n        }\n\n        return this;\n\n    }\n\n    wrapLoadedModule (module) {\n\n        var defaultScopeVars = this.bootstrapScopeVars;\n        \n        return this.provide(\n            module.ref, \n            module.inject, \n            module.bootstrap, \n            Object.create(defaultScopeVars)\n        );\n\n    }\n\n    bootstrapWrappedModules () {\n\n        this.wrappedModules.forEach((module) => {\n            this.bootstrapModule(module);\n        });\n\n        return this;\n\n    }\n\n    get modulesLoaded () {\n        return this.loadedModules.length > 0;\n    }\n\n    get allModulesWrapped () {\n        return this.loadedModules.length === this.wrappedModules.length;\n    }\n\n    bootstrap () {\n\n        if (!this.modulesLoaded) {\n            this.loadModules();\n        }\n\n        if (!this.allModulesWrapped) {\n            this.wrapLoadedModules();\n        }\n        \n        this.bootstrapWrappedModules()\n            .emit('bootstrapped');\n\n    }\n\n    bootstrapModule (moduleWrapper) {\n\n        if (moduleWrapper.isBootstrapped) {\n            return moduleWrapper;\n        }\n\n        moduleWrapper.bootstrap(\n            resolveModuleDependencies(moduleWrapper, this)\n        );\n\n        if (true === moduleWrapper.isInjectableAsInstance) {\n\n            let ref = moduleWrapper.instanceRef;\n            let injectable = moduleWrapper\n                .injectableFor(ref)\n                .injectable;\n\n            this.defineInjectable(ref, injectable);\n\n        }\n\n        if (true === moduleWrapper.isInjectableAsClass) {\n            \n            let ref = moduleWrapper.classRef;\n            let injectable = moduleWrapper\n                .injectableFor(ref)\n                .injectable;\n\n            this.defineInjectable(ref, injectable);\n\n        }\n\n        return moduleWrapper;\n\n    }\n\n    hasModule (ref) {\n        return this.moduleWrapperRefs.has(ref);\n    }\n\n    getInjectable (ref) {\n        return this.injectables.get(ref);\n    }\n\n    getModule (ref) {\n\n        if (this.hasOverrideForModule(ref)) {\n            return this.getOverrideForModule(ref);\n        }\n\n        if (!this.hasModule(ref)) {\n            throw new Error(util.format(\n                'Module for \"%s\" does not exist or has not been loaded yet', ref\n            ));\n        }\n\n        return this.moduleWrapperRefs.get(ref);\n\n    }\n\n    hasOverrideForModule (ref) {\n        return this.moduleWrapperRefOverrides.has(ref);\n    }\n\n    getOverrideForModule (ref) {\n        return this.moduleWrapperRefOverrides.get(ref);\n    }\n\n    injectable (ref) {\n\n        if (undefined !== this.getInjectable(ref)) {\n            return this.getInjectable(ref);\n        }\n\n        var module = this.getModule(ref);\n\n        if (undefined === module) {\n            throw new Error(util.format(\n                'Couldn\\'t find injectable or module for ref \"%s\"', ref\n            ));\n        }\n\n        if (false === module.isBootstrapped) {\n            throw new Error(util.format(\n                'Module for \"%s\" has not been bootstrapped yet', ref\n            ));\n        }\n\n        return undefined;\n\n    }\n\n}\n\nfunction resolveModuleDependencies (moduleWrapper, injector) {\n\n    var moduleRef = moduleWrapper.ref;\n    var dependencyRefs = moduleWrapper.dependencyRefs;\n\n    if (!dependencyRefs || dependencyRefs.length < 1) {\n        return [];\n    }\n\n    return dependencyRefs.map((dependencyRef, index) => {\n\n        if ('' === dependencyRef) {\n            throw new Error(util.format(\n                __.ERROR_MESSAGE_NONAME_DEPENDENCY, index\n            ));\n        }\n\n        var injectable = injector.getInjectable(dependencyRef);\n        if (undefined !== injectable) {\n            return injectable;\n        }\n\n        var moduleWrapper = injector.getModule(dependencyRef);\n        if (undefined === moduleWrapper) {\n            return injector.missingDependencyHandler(\n                moduleRef,\n                dependencyRef,\n                index\n            );\n        }\n\n        injector.bootstrapModule(moduleWrapper);\n\n        return injector.injectable(dependencyRef);\n\n    });\n\n}\n"]}