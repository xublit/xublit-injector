{"version":3,"sources":["../src/xublit-injector.es6"],"names":[],"mappings":"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","file":"xublit-injector.js","sourcesContent":["import 'babel-polyfill';\n\nimport EventEmitter from 'events';\n\nimport * as path from 'path';\nimport * as util from 'util';\n\nimport ModuleWrapper from './module-wrapper';\n\nimport * as __ from './constants';\nimport { loadModulesIn } from './module-loader';\n\nexport default class Injector extends EventEmitter {\n\n    constructor (opts) {\n\n        super();\n\n        opts = opts || {};\n\n        if (!opts.baseDir) {\n            throw new Error('Missing \"baseDir\" option');\n        }\n\n        var defaults = {\n            baseDir: '',\n            coreModuleName: __.DEFAULT_CORE_MODULE_NAME,\n            includeDirs: [\n                path.join(opts.baseDir, 'node_modules', 'xublit*'), \n                path.join(opts.baseDir, 'src'),\n            ],\n            missingDependencyHandler: function () { },\n            moduleLoader: loadModulesIn,\n        };\n\n        Object.keys(defaults).forEach((key) => {\n\n            var value = key in opts ? opts[key] : defaults[key];\n\n            switch (key) {\n\n                case 'includeDirs':\n                    Injector.assertValidIncludeDirs(value);\n                    value = value.slice(0);\n                    break;\n\n                case 'moduleLoader':\n                    // no break\n\n                case 'missingDependencyHandler':\n                    if ('function' !== typeof value) {\n                        throw new TypeError(util.format(\n                            __.ERROR_MESSAGE_INVALID_FUNCTION_FOR, key\n                        ));\n                    }\n                    break;\n\n            }\n\n            Object.defineProperty(this, key, {\n                value: value,\n                enumerable: true,\n            });\n\n        });\n\n        Object.defineProperties(this, {\n\n            moduleWrapperRefs: {\n                value: new Map(),\n                enumerable: true,\n            },\n\n            loadedModules: {\n                value: [],\n                enumerable: true,\n            },\n\n            wrappedModules: {\n                value: [],\n            },\n\n        });\n\n    }\n\n    static assertValidIncludeDirs (includeDirs) {\n\n        if (!Array.isArray(includeDirs)) {\n            throw new TypeError(__.ERROR_MESSAGE_INCL_DIRS_NOT_ARRAY);\n        }\n\n        includeDirs.forEach((includeDir) => {\n            if (!path.isAbsolute(includeDir)) {\n                throw new Error(util.format(\n                    __.ERROR_MESSAGE_RELATIVE_INCL_DIR, includeDir\n                ));\n            }\n        });\n\n    }\n\n    defineModuleWrapperRef (ref, moduleWrapper) {\n        this.moduleWrapperRefs.set(ref, moduleWrapper);\n    }\n\n    loadModules () {\n\n        var loadedModules = this.moduleLoader(this.includeDirs) || [];\n\n        Array.prototype.push.apply(\n            this.loadedModules, \n            loadedModules\n        );\n\n        return this;\n\n    }\n\n    wrapLoadedModules () {\n\n        this.loadedModules.forEach((module) => {\n\n            var d = new ModuleWrapper(module);\n\n            d.provideInjector(this);\n\n            this.wrappedModules.push(d);\n\n            if (true === d.isInjectableAsInstance) {\n                this.defineModuleWrapperRef(d.instanceRef, d);\n            }\n\n            if (true === d.isInjectableAsClass) {\n                this.defineModuleWrapperRef(d.classRef, d);\n            }\n\n        });\n\n        return this;\n\n    }\n\n    bootstrapWrappedModules () {\n\n        this.wrappedModules.forEach((module) => {\n            this.bootstrapModule(module);\n        });\n\n        return this;\n\n    }\n\n    bootstrap () {\n        \n        this.loadModules()\n            .wrapLoadedModules()\n            .bootstrapWrappedModules();\n\n        this.emit('bootstrapped');\n\n    }\n\n    bootstrapModule (module) {\n\n        if (module.isBootstrapped) {\n            return module;\n        }\n\n        module.bootstrap(this.resolveModuleDependencies(module));\n\n        return module;\n\n    }\n\n    injectable (ref) {\n\n        var wrapperRefs = this.moduleWrapperRefs;\n\n        if (!wrapperRefs.has(ref)) {\n            throw new Error(util.format(\n                'Module for \"%s\" does not exist or has not been loaded yet', ref\n            ));\n        }\n\n        var module = wrapperRefs.get(ref);\n\n        if (false === module.isBootstrapped) {\n            throw new Error(util.format(\n                'Module for \"%s\" has not been bootstrapped yet', ref\n            ));\n        }\n\n        return module\n            .injectableFor(ref)\n            .injectable;\n\n    }\n\n    resolveModuleDependencies (module) {\n\n        var moduleRef = module.ref;\n        var dependencyRefs = module.dependencyRefs;\n\n        if (!dependencyRefs || dependencyRefs.length < 1) {\n            return [];\n        }\n\n        return dependencyRefs.map((dependencyRef, index) => {\n\n            if ('' === dependencyRef) {\n                throw new Error(util.format(\n                    __.ERROR_MESSAGE_NONAME_DEPENDENCY, index\n                ));\n            }\n\n            var dependency = this.moduleWrapperRefs.get(dependencyRef);\n\n            if (undefined === dependency) {\n                return this.missingDependencyHandler(\n                    moduleRef,\n                    dependencyRef,\n                    index\n                );\n            }\n\n            return this\n                .bootstrapModule(dependency)\n                .injectableFor(dependencyRef)\n                .injectable;\n\n        });\n\n    }\n\n}\n"]}